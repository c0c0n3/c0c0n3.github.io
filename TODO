Site Generation
===============

idea
----
build a pipeline in which input docs are converted to semantic html 5, then 
presentation elements are added as needed to html docs, templates are applied,
etc.
any reference amongst docs should be kept in a db and be statically checked at
compile time to avoid broken links.

tools
-----
* haskell, blaze html, hxt, web routes, hakyll, shake
* also consider alternatives: https://wiki.haskell.org/Web/Libraries

NB
--
site generation is not automated. This is what I've done:

 1. copy files:
     avatar/dark.transparent.svg    -> media/avatar.svg
     diagrams/avatar-slides.svg     -> media/     
     icons/{copyleft, groupoid}.svg -> media/ 

 2. in diagrams, run: split-layers avatar-slides.svg
    then: mv avatar-slides.{1,2,3}.svg ../media/

 3. Edit media/avatar-slides.* to make all Inkscape layers visible

 4. Edit media/avatar-slides.svg to make it work with SVG fragments, add style:
    <style>
    svg > g {
      display: none;
    }
    svg > g:target {
      display: block;
    }
    </style>

    NB SVG fragments don't work in Android 4 and don't display properly in Safari
       (view index.semantic.html); so using separate files for now in index.html.
       Tried object tag with fragments but then you need to trigger the re-display
       of a layer inside SVG after it has been viewed once; not worth doing now
       as I'm going to embed page-specific SVG and use symbols instead...
     
 5. merge index.semantic.html manually into index.html
 
All this will have to be handled by the site generation pipeline.


Handling of SVG
===============

icons (and shared graphics)
-----
* one icon per layer
* each layer can define its own viewbox if needed
* icon file linked from html, not embedded
* icons used by adding object tag to html doc
  (svg + use only works in firefox unless the svg file is embedded just after
   body tag)
* adding of object tag will be done by a filter in the site generation pipeline
* icons styled using css

page-specific graphics (e.g. diagrams)
----------------------
* embed svg into html (svg doc only contains symbols)
* reference graphic elements (symbols) by means of svg+use
* style in css

slides
------
* generate css slider with a filter in the site generation pipeline

SVG processing
--------------
* each icon could actually be kept in its own file and a pipeline filter could
  merge all files together
* ditto for other graphics
* also need a pipeline filter to inject following css in layered svg so that 
  only referenced layer is shown:  
  <defs>
    <style>
    svg > g {
      display: none;
    }
    svg > g:target {
      display: inline;
    }
    </style>
  </defs>
  NB: this is not needed if using SVG symbols.
 * find out if removing width & height from svg tag is actually needed
